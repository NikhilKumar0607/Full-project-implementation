1) personal portfolio
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>My Personal Portfolio</title>
<style>
  /* Reset and base */
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    background: #f4f7f8;
    color: #333;
    scroll-behavior: smooth;
  }
  a {
    color: #0077ff;
    text-decoration: none;
  }
  a:hover {
    text-decoration: underline;
  }

  /* Container */
  .container {
    max-width: 1000px;
    margin: auto;
    padding: 20px 15px;
  }

  /* Navigation */
  nav {
    background: #222;
    color: #eee;
    position: sticky;
    top: 0;
    z-index: 999;
  }
  nav .container {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  nav h1 {
    font-size: 1.5rem;
    letter-spacing: 2px;
    font-weight: 700;
  }
  nav ul {
    display: flex;
    list-style: none;
  }
  nav li {
    margin-left: 25px;
  }
  nav a {
    color: #eee;
    font-weight: 600;
    font-size: 1rem;
    padding: 15px 0;
    display: block;
  }
  nav a:hover,
  nav a:focus {
    color: #00b4ff;
  }

  /* Hero Section / About */
  #about {
    background: #0077ff;
    color: white;
    padding: 60px 20px;
    border-radius: 8px;
    margin-bottom: 50px;
    text-align: center;
  }
  #about h2 {
    font-size: 2.75rem;
    margin-bottom: 10px;
    font-weight: 700;
  }
  #about p {
    font-size: 1.25rem;
    max-width: 650px;
    margin: 0 auto;
  }

  /* Projects Section */
  #projects {
    padding-bottom: 50px;
  }
  #projects h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 40px;
    color: #222;
  }
  .project-list {
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax(280px,1fr));
    gap: 25px;
  }
  .project-item {
    background: white;
    border-radius: 8px;
    box-shadow: 0 5px 20px rgb(0 119 255 / 0.15);
    padding: 20px;
    transition: transform 0.3s ease;
  }
  .project-item:hover {
    transform: translateY(-5px);
  }
  .project-item h3 {
    margin-bottom: 10px;
    color: #0077ff;
  }
  .project-item p {
    font-size: 1rem;
    color: #555;
    margin-bottom: 15px;
    min-height: 60px;
  }
  .project-item a.button {
    background: #0077ff;
    color: white;
    padding: 8px 14px;
    border-radius: 6px;
    font-weight: 600;
    display: inline-block;
    text-align: center;
    transition: background-color 0.3s ease;
  }
  .project-item a.button:hover {
    background: #005bb5;
  }

  /* Contact Section */
  #contact {
    padding-bottom: 60px;
  }
  #contact h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 35px;
    color: #222;
  }
  form {
    max-width: 600px;
    margin: auto;
    background: white;
    padding: 30px 25px;
    border-radius: 8px;
    box-shadow: 0 5px 20px rgb(0 119 255 / 0.15);
  }
  form .form-group {
    margin-bottom: 20px;
  }
  form label {
    display: block;
    font-weight: 600;
    margin-bottom: 8px;
  }
  form input[type="text"],
  form input[type="email"],
  form textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1.5px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
    resize: vertical;
    transition: border-color 0.3s ease;
  }
  form input[type="text"]:focus,
  form input[type="email"]:focus,
  form textarea:focus {
    border-color: #0077ff;
    outline: none;
  }
  form textarea {
    min-height: 110px;
  }
  form button {
    display: inline-block;
    background: #0077ff;
    color: white;
    border: none;
    padding: 14px 28px;
    font-size: 1.1rem;
    font-weight: bold;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  form button:hover {
    background: #005bb5;
  }
  /* Footer */
  footer {
    text-align: center;
    padding: 20px 10px;
    color: #777;
    border-top: 1px solid #ddd;
    font-size: 0.9rem;
    margin-top: 70px;
  }

  /* Responsive adjustments */
  @media (max-width: 600px) {
    nav ul {
      flex-direction: column;
      background: #222;
      position: fixed;
      width: 100%;
      top: 50px;
      left: -100%;
      transition: left 0.3s ease;
      z-index: 1000;
    }
    nav ul.active {
      left: 0;
    }
    nav li {
      margin: 15px 0;
      text-align: center;
    }
    nav .menu-toggle {
      display: block;
      cursor: pointer;
      font-size: 1.6rem;
      padding: 15px;
      user-select: none;
    }
  }
  @media (min-width: 601px) {
    nav .menu-toggle {
      display: none;
    }
  }
</style>
</head>
<body>
<nav>
  <div class="container">
    <h1>MyPortfolio</h1>
    <span class="menu-toggle" aria-label="Toggle menu" tabindex="0">&#9776;</span>
    <ul id="nav-links">
      <li><a href="#about" tabindex="1">About</a></li>
      <li><a href="#projects" tabindex="2">Projects</a></li>
      <li><a href="#contact" tabindex="3">Contact</a></li>
    </ul>
  </div>
</nav>

<div id="main-content">
  <section id="about" class="container" tabindex="0">
    <h2>About Me</h2>
    <p>Hello! I am a passionate web developer with a knack for creating clean, user-friendly websites and applications. I specialize in modern JavaScript, CSS, and HTML5. Iâ€™m excited to share my projects and connect with you!</p>
  </section>

  <section id="projects" class="container">
    <h2>Projects</h2>
    <div class="project-list">
      <article class="project-item" tabindex="0">
        <h3>Personal Portfolio Website</h3>
        <p>A fully responsive multi-section portfolio website showcasing my skills, projects, and contact form.</p>
        <a href="personal-portfolio.html" class="button" target="_blank" rel="noopener" aria-label="View Personal Portfolio Website project">View Project</a>
      </article>
      <article class="project-item" tabindex="0">
        <h3>To-Do List App</h3>
        <p>A simple and intuitive To-Do list app with task persistence using local storage.</p>
        <a href="todo-list.html" class="button" target="_blank" rel="noopener" aria-label="View To-Do List App project">View Project</a>
      </article>
      <article class="project-item" tabindex="0">
        <h3>Product Page with Filters</h3>
        <p>An interactive product listing page with filtering by category, price range, and sorting by ratings.</p>
        <a href="product-page.html" class="button" target="_blank" rel="noopener" aria-label="View Product Page project">View Project</a>
      </article>
    </div>
  </section>

  <section id="contact" class="container" tabindex="0">
    <h2>Contact Me</h2>
    <form id="contact-form" novalidate>
      <div class="form-group">
        <label for="name">Name *</label>
        <input type="text" id="name" aria-required="true" required placeholder="Your name" />
      </div>
      <div class="form-group">
        <label for="email">Email *</label>
        <input type="email" id="email" aria-required="true" required placeholder="your.email@example.com" />
      </div>
      <div class="form-group">
        <label for="message">Message *</label>
        <textarea id="message" aria-required="true" required placeholder="Write your message here..."></textarea>
      </div>
      <button type="submit" aria-label="Send message">Send Message</button>
    </form>
  </section>
</div>

<footer>
  &copy; 2024 MyPortfolio. All rights reserved.
</footer>

<script>
  const menuToggle = document.querySelector('.menu-toggle');
  const navLinks = document.getElementById('nav-links');

  menuToggle.addEventListener('click', () => {
    navLinks.classList.toggle('active');
  });
</script>
</body>
</html>

2) to do list 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List App</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f4f7f8;
            color: #333;
            line-height: 1.6;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #0077ff;
        }
        .container {
            max-width: 600px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 5px 20px rgba(0, 119, 255, 0.15);
        }
        input[type="text"] {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1.5px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
            margin-bottom: 10px;
        }
        button {
            background: #0077ff;
            color: white;
            border: none;
            padding: 10px 15px;
            font-size: 1rem;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background: #005bb5;
        }
        ul {
            list-style: none;
            padding: 0;
        }
        li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }
        li.completed {
            text-decoration: line-through;
            color: #aaa;
        }
        .delete-btn {
            background: #ff4d4d;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }
        .delete-btn:hover {
            background: #ff1a1a;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>To-Do List</h1>
        <input type="text" id="task-input" placeholder="Add a new task..." />
        <button id="add-task-btn">Add Task</button>
        <ul id="task-list"></ul>
    </div>

    <script>
        const taskInput = document.getElementById('task-input');
        const addTaskBtn = document.getElementById('add-task-btn');
        const taskList = document.getElementById('task-list');

        // Load tasks from localStorage
        document.addEventListener('DOMContentLoaded', loadTasks);

        // Add task event
        addTaskBtn.addEventListener('click', addTask);

        // Function to add a task
        function addTask() {
            const taskText = taskInput.value.trim();
            if (taskText === '') {
                alert('Please enter a task.');
                return;
            }
            const task = {
                text: taskText,
                completed: false
            };
            addTaskToDOM(task);
            saveTaskToLocalStorage(task);
            taskInput.value = '';
        }

        // Function to add task to the DOM
        function addTaskToDOM(task) {
            const li = document.createElement('li');
            li.textContent = task.text;
            if (task.completed) {
                li.classList.add('completed');
            }
            li.addEventListener('click', () => {
                li.classList.toggle('completed');
                updateTaskInLocalStorage(task.text);
            });
            const deleteBtn = document.createElement('button');
            deleteBtn.textContent = 'Delete';
            deleteBtn.classList.add('delete-btn');
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                deleteTaskFromLocalStorage(task.text);
                li.remove();
            });
            li.appendChild(deleteBtn);
            taskList.appendChild(li);
        }

        // Function to save task to localStorage
        function saveTaskToLocalStorage(task) {
            const tasks = getTasksFromLocalStorage();
            tasks.push(task);
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }

        // Function to load tasks from localStorage
        function loadTasks() {
            const tasks = getTasksFromLocalStorage();
            tasks.forEach(task => addTaskToDOM(task));
        }

        // Function to get tasks from localStorage
        function getTasksFromLocalStorage() {
            const tasks = localStorage.getItem('tasks');
            return tasks ? JSON.parse(tasks) : [];
        }

        // Function to update task in localStorage
        function updateTaskInLocalStorage(taskText) {
            const tasks = getTasksFromLocalStorage();
            const task = tasks.find(t => t.text === taskText);
            if (task) {
                task.completed = !task.completed;
                localStorage.setItem('tasks', JSON.stringify(tasks));
            }
        }

        // Function to delete task from localStorage
        function deleteTaskFromLocalStorage(taskText) {
            let tasks = getTasksFromLocalStorage();
            tasks = tasks.filter(t => t.text !== taskText);
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }
    </script>
</body>
</html>


3) product listing page
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Product Page with Filter & Sort</title>
<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #f4f7f8;
    color: #333;
    margin: 0;
    padding: 20px;
  }
  h1 {
    text-align: center;
    color: #0077ff;
    margin-bottom: 30px;
  }
  .container {
    max-width: 1100px;
    margin: 0 auto;
  }
  .controls {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 30px;
    background: white;
    padding: 15px 20px;
    border-radius: 8px;
    box-shadow: 0 5px 20px rgba(0,119,255,0.15);
  }
  .control-group {
    flex: 1 1 200px;
    min-width: 180px;
  }
  .control-group label {
    display: block;
    font-weight: 600;
    margin-bottom: 8px;
    color: #0077ff;
  }
  select, input[type="number"] {
    width: 100%;
    padding: 8px 12px;
    border-radius: 5px;
    border: 1.5px solid #ccc;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }
  select:focus, input[type="number"]:focus {
    border-color: #0077ff;
    outline: none;
  }
  .products {
    display: grid;
    grid-template-columns: repeat(auto-fill,minmax(230px,1fr));
    gap: 25px;
  }
  .product-card {
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,119,255,0.1);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    transition: box-shadow 0.3s ease;
  }
  .product-card:hover {
    box-shadow: 0 8px 24px rgba(0,119,255,0.25);
  }
  .product-name {
    font-weight: 700;
    font-size: 1.15rem;
    margin-bottom: 6px;
    color: #0077ff;
  }
  .product-category {
    font-style: italic;
    color: #555;
    margin-bottom: 6px;
  }
  .product-price {
    font-weight: 600;
    margin-bottom: 12px;
    color: #222;
  }
  .product-rating {
    color: #ffaa00;
    font-weight: 600;
  }

  @media (max-width: 600px) {
    .controls {
      flex-direction: column;
    }
  }
</style>
</head>
<body>
  <div class="container">
    <h1>Product Catalog</h1>

    <section class="controls" aria-label="Filter and sort options">
      <div class="control-group">
        <label for="category-filter">Filter by Category</label>
        <select id="category-filter" aria-controls="product-list">
          <option value="all">All</option>
          <option value="electronics">Electronics</option>
          <option value="books">Books</option>
          <option value="clothing">Clothing</option>
          <option value="kitchen">Kitchen</option>
        </select>
      </div>

      <div class="control-group">
        <label for="price-min">Price Min ($)</label>
        <input type="number" id="price-min" min="0" placeholder="0" aria-controls="product-list" />
      </div>

      <div class="control-group">
        <label for="price-max">Price Max ($)</label>
        <input type="number" id="price-max" min="0" placeholder="Any" aria-controls="product-list" />
      </div>

      <div class="control-group">
        <label for="sort-by">Sort By</label>
        <select id="sort-by" aria-controls="product-list">
          <option value="rating-desc">Rating: High to Low</option>
          <option value="rating-asc">Rating: Low to High</option>
          <option value="price-asc">Price: Low to High</option>
          <option value="price-desc">Price: High to Low</option>
        </select>
      </div>
    </section>

    <section id="product-list" class="products" aria-live="polite" aria-label="Product list">
      <!-- Products will be injected here -->
    </section>
  </div>

<script>
  const products = [
    { id: 1, name: 'Wireless Headphones', category: 'electronics', price: 99.99, rating: 4.5 },
    { id: 2, name: 'Smartphone', category: 'electronics', price: 599.99, rating: 4.7 },
    { id: 3, name: 'Cookbook: Healthy Meals', category: 'books', price: 19.99, rating: 4.2 },
    { id: 4, name: 'Men\'s Jacket', category: 'clothing', price: 79.99, rating: 4.0 },
    { id: 5, name: 'Blender', category: 'kitchen', price: 49.99, rating: 4.1 },
    { id: 6, name: 'Novel: Mystery Thriller', category: 'books', price: 14.99, rating: 4.8 },
    { id: 7, name: 'Womenâ€™s T-Shirt', category: 'clothing', price: 24.99, rating: 3.9 },
    { id: 8, name: 'Laptop', category: 'electronics', price: 999.99, rating: 4.6 },
    { id: 9, name: 'Coffee Maker', category: 'kitchen', price: 39.99, rating: 4.3 },
    { id: 10, name: 'E-reader', category: 'electronics', price: 129.99, rating: 4.4 }
  ];

  const categoryFilter = document.getElementById('category-filter');
  const priceMinInput = document.getElementById('price-min');
  const priceMaxInput = document.getElementById('price-max');
  const sortBySelect = document.getElementById('sort-by');
  const productList = document.getElementById('product-list');

  function displayProducts(items) {
    productList.innerHTML = '';
    if (items.length === 0) {
      productList.innerHTML = '<p>No products match your filters.</p>';
      return;
    }
    items.forEach(p => {
      const card = document.createElement('article');
      card.className = 'product-card';
      card.setAttribute('tabindex', '0');
      card.innerHTML = `
        <h3 class="product-name">${p.name}</h3>
        <p class="product-category">Category: ${capitalize(p.category)}</p>
        <p class="product-price">$${p.price.toFixed(2)}</p>
        <p class="product-rating">${'â˜…'.repeat(Math.round(p.rating))} (${p.rating.toFixed(1)})</p>
      `;
      productList.appendChild(card);
    });
  }

  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  function filterAndSortProducts() {
    let filtered = products;

    const category = categoryFilter.value;
    const minPrice = parseFloat(priceMinInput.value);
    const maxPrice = parseFloat(priceMaxInput.value);
    const sortBy = sortBySelect.value;

    // Filter by category
    if (category !== 'all') {
      filtered = filtered.filter(p => p.category === category);
    }
    // Filter by price min
    if (!isNaN(minPrice)) {
      filtered = filtered.filter(p => p.price >= minPrice);
    }
    // Filter by price max
    if (!isNaN(maxPrice)) {
      filtered = filtered.filter(p => p.price <= maxPrice);
    }

    // Sort
    switch (sortBy) {
      case 'rating-desc':
        filtered.sort((a, b) => b.rating - a.rating);
        break;
      case 'rating-asc':
        filtered.sort((a, b) => a.rating - b.rating);
        break;
      case 'price-asc':
        filtered.sort((a, b) => a.price - b.price);
        break;
      case 'price-desc':
        filtered.sort((a, b) => b.price - a.price);
        break;
    }

    displayProducts(filtered);
  }

  // Event listeners for controls
  categoryFilter.addEventListener('change', filterAndSortProducts);
  priceMinInput.addEventListener('input', filterAndSortProducts);
  priceMaxInput.addEventListener('input', filterAndSortProducts);
  sortBySelect.addEventListener('change', filterAndSortProducts);

  // Initial render
  filterAndSortProducts();
</script>

</body>
</html>
